// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise
       
        


    PARTS:
   // Put you code here:
   //zx
    Not16(in=x, out=xnot);
    And16(a=x, b=xnot, out=xzero);
    Mux16(a=x, b=xzero, sel=zx, out=xzx);

    //nx
    Not16(in=xzx, out=xzxnot);
    Mux16(a=xzx, b=xzxnot, sel=nx, out=xnx);

    //zy
    Not16(in=y, out=ynot);
    And16(a=y, b=ynot, out=y0);
    Mux16(a=y, b=y0, sel=zy, out=yzy);

    //ny
    Not16(in=yzy, out=yzynot);
    Mux16(a=yzy, b=yzynot, sel=ny, out=yny);

    //f
    And16(a=xnx, b=yny, out=andxy);
    Add16(a=xnx, b=yny, out=addxy);
    Mux16(a=andxy, b=addxy, sel=f, out=outf);

    //no
    Not16(in=outf, out=outnot);    
    Mux16(a=outf, b=outnot, sel=no, out=out);
    
    //zr
    Mux16(a=outf, b=outnot, sel=no, out[0..7]=outno1, out[8..15]=outno2);
    Or8Way(in=outno1, out=zr1);
    Or8Way(in=outno2, out=zr2);
    Or(a=zr1, b=zr2, out=nzr);
    Not(in=nzr, out=zr);
    
    //ng
    Mux16(a=outf, b=outnot, sel=no, out[15]=outmsb, out[0..14]=out1);
    Or(a=outmsb, b=outmsb, out=ng);

    //zr, ng
    /*
    Mux16(a=outf, b=outnot, sel=no, out=outt);       
    
    Or(a=outt[0], b=outt[1], out=outor1);
    Or(a=outor1, b=outt[2], out=outor2);
    Or(a=outor2, b=outt[3], out=outor3);
    Or(a=outor3, b=outt[4], out=outor4);
    Or(a=outor4, b=outt[5], out=outor5);
    Or(a=outor5, b=outt[6], out=outor6);
    Or(a=outor6, b=outt[7], out=outor7);
    Or(a=outor7, b=outt[8], out=outor8);
    Or(a=outor8, b=outt[9], out=outor9);
    Or(a=outor9, b=outt[10], out=outor10);
    Or(a=outor10, b=outt[11], out=outor11);
    Or(a=outor11, b=outt[12], out=outor12);
    Or(a=outor12, b=outt[13], out=outor13);
    Or(a=outor13, b=outt[14], out=outor14);
    Or(a=outor14, b=outt[15], out=zr);
    And(a=outt[15], b=outt[15], out=ng);
    */
}